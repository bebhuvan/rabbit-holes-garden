---
import BaseLayout from '../layouts/BaseLayout.astro';
import PostExporter from '../components/PostExporter.astro';
---

<BaseLayout title="Admin - AI Post Generator">
  <div class="container">
    <header class="admin-header">
      <h1>AI Post Generator</h1>
      <p>Create thoughtful posts from links, text, PDFs, and other sources</p>
    </header>
    
    <main class="admin-main">
      <div class="generator-form">
        <div class="input-tabs">
          <button class="tab-button active" data-tab="url">URL</button>
          <button class="tab-button" data-tab="text">Text</button>
          <button class="tab-button" data-tab="file">File</button>
        </div>

        <div class="tab-content">
          <!-- URL Input -->
          <div class="tab-panel active" id="url-panel">
            <div class="form-group">
              <label for="url-input">Website URL</label>
              <input type="url" id="url-input" placeholder="https://example.com/article" />
              <small>Paste a link to extract and analyze content</small>
            </div>
          </div>

          <!-- Text Input -->
          <div class="tab-panel" id="text-panel">
            <div class="form-group">
              <label for="text-input">Text Input</label>
              <textarea id="text-input" rows="10" placeholder="Paste your text content here..."></textarea>
              <small>Share interesting text, quotes, or ideas</small>
            </div>
            <div class="form-group">
              <label for="text-title">Optional Title</label>
              <input type="text" id="text-title" placeholder="Source title or description" />
            </div>
          </div>

          <!-- File Input -->
          <div class="tab-panel" id="file-panel">
            <div class="form-group">
              <label for="file-input">Upload File</label>
              <div class="file-drop-zone" id="file-drop-zone">
                <input type="file" id="file-input" accept=".pdf,.txt,.doc,.docx" />
                <div class="drop-zone-content">
                  <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                    <polyline points="14,2 14,8 20,8"></polyline>
                    <line x1="16" y1="13" x2="8" y2="13"></line>
                    <line x1="16" y1="17" x2="8" y2="17"></line>
                    <polyline points="10,9 9,9 8,9"></polyline>
                  </svg>
                  <p>Drop files here or click to upload</p>
                  <small>Supports PDF, TXT, DOC files</small>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="ai-settings">
          <h3>AI Settings</h3>
          <div class="settings-grid">
            <div class="form-group">
              <label for="ai-provider">Provider</label>
              <select id="ai-provider">
                <option value="openai">OpenAI</option>
                <option value="anthropic">Anthropic (Claude)</option>
              </select>
            </div>
            <div class="form-group">
              <label for="ai-model">Model</label>
              <select id="ai-model">
                <option value="gpt-4">GPT-4</option>
                <option value="gpt-3.5-turbo">GPT-3.5 Turbo</option>
                <option value="claude-3-5-sonnet-20241022" selected>Claude 3.5 Sonnet</option>
                <option value="claude-3-haiku-20240307">Claude 3 Haiku</option>
              </select>
            </div>
            <div class="form-group">
              <label for="temperature">Creativity</label>
              <input type="range" id="temperature" min="0" max="1" step="0.1" value="0.7" />
              <small>Lower = more focused, Higher = more creative</small>
            </div>
          </div>
          <div class="api-keys">
            <div class="form-group">
              <label for="openai-key">OpenAI API Key</label>
              <input type="password" id="openai-key" placeholder="sk-..." />
              <small>Required for OpenAI models</small>
            </div>
            <div class="form-group">
              <label for="anthropic-key">Anthropic API Key</label>
              <input type="password" id="anthropic-key" placeholder="sk-ant-..." />
              <small>Required for Claude models</small>
            </div>
          </div>
        </div>

        <div class="form-actions">
          <button class="generate-btn" id="generate-btn">
            <span class="btn-text">Generate Post</span>
            <div class="spinner" style="display: none;"></div>
          </button>
        </div>
      </div>

      <div class="preview-section" id="preview-section" style="display: none;">
        <h3>Generated Post Preview</h3>
        <div class="post-preview" id="post-preview"></div>
        <div class="preview-actions">
          <button class="btn-secondary" id="edit-btn">Edit Post</button>
          <button class="btn-primary" id="export-btn">Export for Manual Save</button>
          <button class="btn-secondary" id="regenerate-btn">Regenerate</button>
        </div>
      </div>

      <PostExporter />
    </main>
  </div>

  <script>
    // Tab switching
    document.querySelectorAll('.tab-button').forEach(button => {
      button.addEventListener('click', () => {
        const tabId = button.dataset.tab;
        
        // Update active tab button
        document.querySelectorAll('.tab-button').forEach(b => b.classList.remove('active'));
        button.classList.add('active');
        
        // Update active tab panel
        document.querySelectorAll('.tab-panel').forEach(panel => panel.classList.remove('active'));
        document.getElementById(`${tabId}-panel`).classList.add('active');
      });
    });

    // File drop zone
    const dropZone = document.getElementById('file-drop-zone');
    const fileInput = document.getElementById('file-input');

    dropZone.addEventListener('click', () => fileInput.click());
    
    dropZone.addEventListener('dragover', (e) => {
      e.preventDefault();
      dropZone.classList.add('drag-over');
    });
    
    dropZone.addEventListener('dragleave', () => {
      dropZone.classList.remove('drag-over');
    });
    
    dropZone.addEventListener('drop', (e) => {
      e.preventDefault();
      dropZone.classList.remove('drag-over');
      const files = e.dataTransfer.files;
      if (files.length > 0) {
        fileInput.files = files;
        updateFileName(files[0].name);
      }
    });

    fileInput.addEventListener('change', (e) => {
      if (e.target.files.length > 0) {
        updateFileName(e.target.files[0].name);
      }
    });

    function updateFileName(name) {
      const content = dropZone.querySelector('.drop-zone-content p');
      content.textContent = `Selected: ${name}`;
    }

    // Generate post
    document.getElementById('generate-btn').addEventListener('click', async () => {
      const btn = document.getElementById('generate-btn');
      const btnText = btn.querySelector('.btn-text');
      const spinner = btn.querySelector('.spinner');
      
      // Show loading state
      btn.disabled = true;
      btnText.style.display = 'none';
      spinner.style.display = 'inline-block';
      
      try {
        // Get active tab and input
        const activeTab = document.querySelector('.tab-button.active').dataset.tab;
        let inputData = {};
        
        if (activeTab === 'url') {
          inputData = {
            type: 'url',
            content: document.getElementById('url-input').value
          };
        } else if (activeTab === 'text') {
          inputData = {
            type: 'text',
            content: document.getElementById('text-input').value,
            title: document.getElementById('text-title').value
          };
        } else if (activeTab === 'file') {
          const file = document.getElementById('file-input').files[0];
          if (file) {
            inputData = {
              type: 'file',
              file: file
            };
          }
        }
        
        // Get AI settings
        const settings = {
          provider: document.getElementById('ai-provider').value,
          model: document.getElementById('ai-model').value,
          temperature: parseFloat(document.getElementById('temperature').value)
        };
        
        // Call AI API
        try {
          const apiResponse = await fetch(`${getAPIBase()}/api/generate-post`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              inputType: activeTab,
              content: inputData.content,
              metadata: {
                title: inputData.title,
                url: activeTab === 'url' ? inputData.content : undefined
              },
              settings: {
                provider: settings.provider,
                apiKey: getAPIKey(settings.provider),
                model: settings.model,
                temperature: settings.temperature
              }
            })
          });

          if (!apiResponse.ok) {
            throw new Error(`API Error: ${apiResponse.statusText}`);
          }

          const result = await apiResponse.json();
          
          if (result.success) {
            currentPostData = result.post;
            showPreview(result.post);
          } else {
            throw new Error(result.error || 'Unknown error');
          }
          
        } catch (apiError) {
          console.error('AI API Error:', apiError);
          
          // Fallback to mock data if API fails
          const mockPost = {
            title: "AI Generation Failed - Mock Post",
            content: `Error: ${apiError.message}\n\nThis is a fallback mock post. Please check your API key and try again.`,
            excerpt: "API call failed, showing mock content",
            tags: ["error", "mock"]
          };
          
          currentPostData = mockPost;
          showPreview(mockPost);
          
          alert(`AI generation failed: ${apiError.message}\nShowing mock content instead.`);
        }
        
        btn.disabled = false;
        btnText.style.display = 'inline';
        spinner.style.display = 'none';
        
      } catch (error) {
        console.error('Generation failed:', error);
        alert('Failed to generate post. Please try again.');
        
        btn.disabled = false;
        btnText.style.display = 'inline';
        spinner.style.display = 'none';
      }
    });

    function showPreview(post) {
      const previewSection = document.getElementById('preview-section');
      const previewContent = document.getElementById('post-preview');
      
      previewContent.innerHTML = `
        <div class="preview-meta">
          <h4>${post.title}</h4>
          <p class="excerpt">${post.excerpt}</p>
          <div class="tags">
            ${post.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
          </div>
        </div>
        <div class="preview-content">
          ${post.content}
        </div>
      `;
      
      previewSection.style.display = 'block';
      previewSection.scrollIntoView({ behavior: 'smooth' });
    }

    // Helper functions
    function getAPIBase() {
      // For testing, always use localhost - in production, you'd use your Vercel URL
      return 'http://localhost:3000';
    }

    function getAPIKey(provider) {
      // Get API key from form input (you could also store in localStorage)
      const keyInput = document.getElementById(`${provider}-key`);
      return keyInput ? keyInput.value : '';
    }

    // Export post functionality
    let currentPostData = null;
    
    document.getElementById('export-btn')?.addEventListener('click', () => {
      if (currentPostData && window.showPostExporter) {
        window.showPostExporter(currentPostData);
      }
    });
  </script>
</BaseLayout>

<style>
  .admin-header {
    text-align: center;
    padding: 60px 0 40px;
    border-bottom: 1px solid var(--border-light);
    margin-bottom: 40px;
  }

  .admin-header h1 {
    font-size: 32px;
    font-weight: 600;
    margin-bottom: 16px;
    color: var(--text-primary-light);
  }

  .admin-header p {
    color: var(--text-secondary-light);
    font-size: 16px;
  }

  body.dark .admin-header {
    border-bottom-color: var(--border-dark);
  }

  body.dark .admin-header h1 {
    color: var(--text-primary-dark);
  }

  body.dark .admin-header p {
    color: var(--text-secondary-dark);
  }

  .admin-main {
    max-width: 800px;
    margin: 0 auto;
  }

  .generator-form {
    background: var(--bg-light);
    border: 1px solid var(--border-light);
    border-radius: 16px;
    padding: 32px;
    margin-bottom: 32px;
  }

  body.dark .generator-form {
    background: var(--accent-dark);
    border-color: var(--border-dark);
  }

  .input-tabs {
    display: flex;
    gap: 8px;
    margin-bottom: 32px;
    border-bottom: 1px solid var(--border-light);
  }

  body.dark .input-tabs {
    border-bottom-color: var(--border-dark);
  }

  .tab-button {
    background: none;
    border: none;
    padding: 12px 24px;
    color: var(--text-secondary-light);
    cursor: pointer;
    border-bottom: 2px solid transparent;
    transition: all 0.2s ease;
    font-weight: 500;
  }

  .tab-button:hover,
  .tab-button.active {
    color: var(--text-primary-light);
    border-bottom-color: var(--link-light);
  }

  body.dark .tab-button {
    color: var(--text-secondary-dark);
  }

  body.dark .tab-button:hover,
  body.dark .tab-button.active {
    color: var(--text-primary-dark);
    border-bottom-color: var(--link-dark);
  }

  .tab-panel {
    display: none;
  }

  .tab-panel.active {
    display: block;
  }

  .form-group {
    margin-bottom: 24px;
  }

  .form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: var(--text-primary-light);
  }

  body.dark .form-group label {
    color: var(--text-primary-dark);
  }

  .form-group input,
  .form-group textarea,
  .form-group select {
    width: 100%;
    padding: 12px 16px;
    border: 1px solid var(--border-light);
    border-radius: 8px;
    background: var(--bg-light);
    color: var(--text-primary-light);
    font-size: 14px;
    transition: all 0.2s ease;
  }

  .form-group input:focus,
  .form-group textarea:focus,
  .form-group select:focus {
    outline: none;
    border-color: var(--link-light);
    box-shadow: 0 0 0 3px rgba(0, 102, 204, 0.1);
  }

  body.dark .form-group input,
  body.dark .form-group textarea,
  body.dark .form-group select {
    border-color: var(--border-dark);
    background: var(--bg-dark);
    color: var(--text-primary-dark);
  }

  body.dark .form-group input:focus,
  body.dark .form-group textarea:focus,
  body.dark .form-group select:focus {
    border-color: var(--link-dark);
    box-shadow: 0 0 0 3px rgba(102, 179, 255, 0.1);
  }

  .form-group small {
    display: block;
    margin-top: 4px;
    color: var(--text-tertiary-light);
    font-size: 12px;
  }

  body.dark .form-group small {
    color: var(--text-tertiary-dark);
  }

  .file-drop-zone {
    border: 2px dashed var(--border-light);
    border-radius: 12px;
    padding: 48px 24px;
    text-align: center;
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
  }

  .file-drop-zone:hover,
  .file-drop-zone.drag-over {
    border-color: var(--link-light);
    background: rgba(0, 102, 204, 0.02);
  }

  body.dark .file-drop-zone {
    border-color: var(--border-dark);
  }

  body.dark .file-drop-zone:hover,
  body.dark .file-drop-zone.drag-over {
    border-color: var(--link-dark);
    background: rgba(102, 179, 255, 0.02);
  }

  #file-input {
    position: absolute;
    opacity: 0;
    pointer-events: none;
  }

  .drop-zone-content svg {
    color: var(--text-tertiary-light);
    margin-bottom: 16px;
  }

  body.dark .drop-zone-content svg {
    color: var(--text-tertiary-dark);
  }

  .drop-zone-content p {
    font-weight: 500;
    margin-bottom: 8px;
    color: var(--text-primary-light);
  }

  body.dark .drop-zone-content p {
    color: var(--text-primary-dark);
  }

  .ai-settings {
    margin-top: 40px;
    padding-top: 32px;
    border-top: 1px solid var(--border-light);
  }

  body.dark .ai-settings {
    border-top-color: var(--border-dark);
  }

  .ai-settings h3 {
    margin-bottom: 20px;
    color: var(--text-primary-light);
  }

  body.dark .ai-settings h3 {
    color: var(--text-primary-dark);
  }

  .settings-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
  }

  @media (max-width: 640px) {
    .settings-grid {
      grid-template-columns: 1fr;
    }
  }

  .form-actions {
    margin-top: 32px;
    text-align: center;
  }

  .generate-btn {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border: none;
    padding: 16px 32px;
    border-radius: 8px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    display: inline-flex;
    align-items: center;
    gap: 8px;
  }

  .generate-btn:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
  }

  .generate-btn:disabled {
    cursor: not-allowed;
    opacity: 0.7;
  }

  .spinner {
    width: 20px;
    height: 20px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top-color: white;
    animation: spin 1s ease-in-out infinite;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  .preview-section {
    background: var(--bg-light);
    border: 1px solid var(--border-light);
    border-radius: 16px;
    padding: 32px;
  }

  body.dark .preview-section {
    background: var(--accent-dark);
    border-color: var(--border-dark);
  }

  .preview-section h3 {
    margin-bottom: 24px;
    color: var(--text-primary-light);
  }

  body.dark .preview-section h3 {
    color: var(--text-primary-dark);
  }

  .post-preview {
    border: 1px solid var(--border-light);
    border-radius: 12px;
    padding: 24px;
    margin-bottom: 24px;
    background: var(--accent-light);
  }

  body.dark .post-preview {
    border-color: var(--border-dark);
    background: var(--bg-dark);
  }

  .preview-meta h4 {
    font-size: 20px;
    font-weight: 600;
    margin-bottom: 12px;
    color: var(--text-primary-light);
  }

  body.dark .preview-meta h4 {
    color: var(--text-primary-dark);
  }

  .preview-meta .excerpt {
    color: var(--text-secondary-light);
    margin-bottom: 16px;
    font-style: italic;
  }

  body.dark .preview-meta .excerpt {
    color: var(--text-secondary-dark);
  }

  .preview-meta .tags {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
    margin-bottom: 24px;
  }

  .preview-meta .tag {
    background: var(--link-light);
    color: white;
    padding: 4px 12px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 500;
  }

  body.dark .preview-meta .tag {
    background: var(--link-dark);
    color: var(--bg-dark);
  }

  .preview-content {
    padding-top: 24px;
    border-top: 1px solid var(--border-light);
    color: var(--text-primary-light);
    line-height: 1.6;
  }

  body.dark .preview-content {
    border-top-color: var(--border-dark);
    color: var(--text-primary-dark);
  }

  .preview-actions {
    display: flex;
    gap: 12px;
    justify-content: center;
    flex-wrap: wrap;
  }

  .btn-primary,
  .btn-secondary {
    padding: 12px 24px;
    border: none;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .btn-primary {
    background: var(--link-light);
    color: white;
  }

  .btn-primary:hover {
    background: #0052a3;
    transform: translateY(-1px);
  }

  body.dark .btn-primary {
    background: var(--link-dark);
    color: var(--bg-dark);
  }

  .btn-secondary {
    background: var(--accent-light);
    color: var(--text-primary-light);
    border: 1px solid var(--border-light);
  }

  .btn-secondary:hover {
    background: var(--border-light);
    transform: translateY(-1px);
  }

  body.dark .btn-secondary {
    background: var(--accent-dark);
    color: var(--text-primary-dark);
    border-color: var(--border-dark);
  }

  body.dark .btn-secondary:hover {
    background: var(--border-dark);
  }
</style>